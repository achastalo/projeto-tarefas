<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
						http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<context:component-scan
		base-package="br.com.caelum.tarefas" />
	<mvc:annotation-driven />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- O controlador do Spring MVC, ou seja o servlet no web.xml , foi configurado 
		para receber todas as requisições incluindo arquivos comuns como imagens, 
		css ou scripts. Queremos que o controlador não atenda essas requisições que 
		não são para ações. Para isso é preciso adicionar no arquivo spring-context.xml 
		um mapeamento que informa ao Spring MVC que ele deve ignorar todo acesso 
		a conteúdo estático. -->
	<mvc:default-servlet-handler />

	<!-- registrar o interceptador -->
	<mvc:interceptors>
		<bean
			class="br.com.caelum.tarefas.interceptor.AutorizadorInterceptor" />
	</mvc:interceptors>


	<!-- Ao usar @Autowired no construtor, o Spring tenta descobrir como abrir 
		uma conexão, mas claro que o Container não faz ideia com qual banco queremos 
		nos conectar. Para solucionar isso o Spring oferece uma configuração de XML 
		que define um provedor de conexões. No mundo JavaEE, este provedor é chamado 
		DataSource e abstrai as configurações de Driver, URL, etc da aplicação. -->
	<bean id="postgreDataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost/teste_cria_tabela" />
		<property name="username" value="postgres" />
		<property name="password" value="server" />
	</bean>
	<!-- Definimos um bean no XML. Um bean é apenas um sinônimo para componente. 
		Ao final, cada bean se torna um objeto administrado pelo Spring. Para o Spring 
		Container, a mysqlDataSource , o JdbcTarefaDao e TarefasController são todos 
		componentes(ou beans) que foram ligados/amarrados. Ou seja, um depende ao 
		outro. O Spring vai criar todos e administrar o ciclo da vida deles. -->
		
		<!-- Esse bean representa a EntityManagerFactory , mas agora gerenciada 
		pelo Spring. Ou seja, toda inicialização da fábrica fica ao encargo do Spring: -->
		
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="postgreDataSource" />
		<property name="jpaVendorAdapter">
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
	</bean>
</beans>
